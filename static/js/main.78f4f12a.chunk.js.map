{"version":3,"sources":["StackContext.ts","CardStack.tsx","GameContext.ts","ChooseGame.tsx","Intro.tsx","StepList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StackContext","React","createContext","CardStack","useContext","stack","add","style","display","height","justifyContent","alignItems","map","child","i","vh","vw","opacity","Math","min","zIndex","transform","position","cloneElement","next","GameContext","ChooseGame","game","setGame","playstyle","setPlaystyle","Card","minWidth","minHeight","Body","Form","Group","Label","FormControl","as","onChange","value","target","undefined","disabled","Footer","Button","Intro","Consumer","id","color","onClick","StepListItem","step","size","fontSize","complete","useState","useMemo","completed","checked","setChecked","checkbox","useCheckboxState","state","setTimeout","icon","xmlns","width","fill","className","viewBox","d","marginTop","marginRight","cursor","setState","text","StepList","steps","maxWidth","Header","Title","Subtitle","filter","it","sort","a","b","num","slice","length","App","gameContext","setSteps","useEffect","GameData","required","found","find","Date","useGameContext","cardStackContext","first","setStack","node","set","useStack","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78f4f12a.chunk.js","sourcesContent":["import React, {ReactNode, ReactNodeArray, useState} from \"react\";\n\ntype Stack = {\n    stack: ReactNodeArray,\n    add: (node: ReactNode) => void,\n    set: (nodes: ReactNodeArray) => void\n}\n\n\ntype UseStackProps = {\n    first: ReactNode\n}\n\nexport const useStack = ({first}: UseStackProps): Stack => {\n    const [stack, setStack] = useState<ReactNodeArray>([first])\n    const add = (node: ReactNode) => setStack(stack => [node, ...stack])\n    return {\n        stack,\n        add,\n        set: setStack\n    } as Stack\n}\n\nconst StackContext = React.createContext({} as Stack)\n\nexport default StackContext\n","import React, {useContext} from \"react\";\nimport StackContext from \"./StackContext\";\n\nconst CardStack = () => {\n    const {stack, add} = useContext(StackContext)\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                height: \"100%\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n        >\n            {\n                stack.map((child, i) => {\n                    const vh = i * 10\n                    const vw = i * 10\n                    const opacity = 1 - (0.4 * Math.min(i, 1)) - (0.1 * i)\n                    const zIndex = -1000 * Math.min(i, 1) - i\n                    return (\n                        i < 3 &&\n                        <div key={i} style={{\n                            transform: `translate(-${vw}vw, -${vh}vh)`,\n                            opacity,\n                            zIndex,\n                            position: i > 0 ? \"absolute\" : \"relative\"\n                        }}>\n                            {React.cloneElement(child as React.ReactElement, {next: () => add(<></>)})}\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\nexport default CardStack\n","import React, {useEffect, useState} from \"react\";\n\nimport GameData from \"./GameData.json\"\n\ntype GC = {\n    game: string,\n    setGame: (game: string) => void,\n    playstyle: string,\n    setPlaystyle: (game: string) => void,\n    steps: Array<Step>,\n    complete: (step: Step) => void\n}\n\nexport type Step = {\n    num: number,\n    requires?: Array<number>,\n    required?: boolean,\n    text: string,\n    completed?: Date\n}\n\nexport const useGameContext = (): GC => {\n    const [game, setGame] = useState<string>()\n    const [playstyle, setPlaystyle] = useState<string>()\n    const [steps, setSteps] = useState<Array<Step>>([])\n\n    useEffect(() => {\n        if (game && playstyle)\n            setSteps((GameData as Record<string, Step[]>)[game].filter(it => playstyle === \"100\" || it.required) || [])\n    }, [game, playstyle])\n\n    const complete = (step: Step) => {\n        const found = steps.find(it => it.num === step.num)\n        if (found) {\n            found.completed = new Date()\n            setSteps([...steps])\n        }\n    }\n\n    return {\n        game,\n        setGame,\n        playstyle,\n        setPlaystyle,\n        steps,\n        complete\n    } as GC\n}\n\nconst GameContext = React.createContext<GC>({} as GC)\n\nexport default GameContext\n","import {Button, Card, Form, FormControl} from \"react-bootstrap\";\nimport React, {useContext} from \"react\";\nimport GameContext from \"./GameContext\";\n\nconst ChooseGame = () => {\n    const {game, setGame, playstyle, setPlaystyle} = useContext(GameContext)\n    return (\n        <Card style={{minWidth: \"50vw\", minHeight: \"20vh\"}}>\n            <Card.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Choose a game</Form.Label>\n                        <FormControl\n                            as={\"select\"}\n                            onChange={({target: {value}}) => setGame(value)}\n                        >\n                            <option value={undefined} style={{display: \"none\"}}/>\n                            <option value={\"RE1\"}>Resident Evil</option>\n                            <option value={\"SH1\"}>Silent Hill</option>\n                            <option value={\"HG\"}>Haunting Ground</option>\n                        </FormControl>\n                    </Form.Group>\n                    {\n                        game &&\n                        <Form.Group>\n                          <Form.Label>Choose a playstyle</Form.Label>\n                          <FormControl\n                              as={\"select\"}\n                              onChange={({target: {value}}) => setPlaystyle(value)}\n                          >\n                            <option value={undefined} style={{display: \"none\"}}/>\n                            <option value={\"ANY\"}>Any%</option>\n                            <option value={\"100\"}>100%</option>\n                            <option disabled value={\"RND\"}>Random</option>\n                          </FormControl>\n                        </Form.Group>\n                    }\n                </Form>\n            </Card.Body>\n            <Card.Footer>\n                <Button disabled={!playstyle}>\n                    Let's a go!\n                </Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n\nexport default ChooseGame\n","import {Button, Card} from \"react-bootstrap\";\nimport ChooseGame from \"./ChooseGame\";\nimport React from \"react\";\nimport StackContext from \"./StackContext\";\n\nconst Intro = () =>\n    <StackContext.Consumer>\n        {({add}) =>\n            <Card style={{minWidth: \"50vw\", minHeight: \"20vh\"}}>\n                <Card.Body>\n                    <div id={\"header\"}\n                         style={{justifyContent: \"center\", alignItems: \"center\",}}>\n                        <h1 id={\"header-title\"}>Point to Pointless<span\n                            style={{color: \"red\"}}>.</span></h1>\n                        <div id={\"header-subheader\"} style={{color: \"#505050\"}}>\n                            Getting from point to point; pointlessly\n                        </div>\n                    </div>\n                </Card.Body>\n                <Card.Footer>\n                    <Button onClick={() => add(<ChooseGame/>)}>\n                        Get Started\n                    </Button>\n                </Card.Footer>\n            </Card>\n\n        }\n\n    </StackContext.Consumer>\n\nexport default Intro\n","import React, {useContext, useMemo, useState} from \"react\";\nimport \"@djthoms/pretty-checkbox\"\nimport GameContext, {Step} from \"./GameContext\";\nimport {Checkbox as PrettyCheckbox, useCheckboxState} from \"pretty-checkbox-react\";\nimport {Card} from \"react-bootstrap\";\n\nconst StepListItem = ({step, size: fontSize = 20}: { step: Step, size?: number }) => {\n    const {complete} = useContext(GameContext)\n    const [checked, setChecked] = useState(useMemo(() => !!step.completed, [step.completed]))\n    const checkbox = useCheckboxState({\n        state: useMemo(() => checked, [checked]),\n        onChange: ({target: {checked}}) => {\n            checked && setTimeout(() => complete(step), 200)\n        }\n    })\n\n    return (\n        <div>\n            <div style={{display: \"inline-flex\"}}>\n                {/* @ts-ignore */}\n                <PrettyCheckbox\n                    {...checkbox}\n                    color={\"danger\"}\n                    icon={\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"\n                             fill=\"currentColor\" className=\"bi bi-check\"\n                             viewBox=\"0 0 16 16\">\n                            <path\n                                d=\"M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z\"/>\n                        </svg>\n                    }\n                    style={{fontSize, marginTop: fontSize / 2 - 10, marginRight: \"0.5em\"}}\n                >\n                </PrettyCheckbox>\n                <span\n                    style={{fontSize, display: \"inline-block\", cursor: \"pointer\"}}\n                    onClick={() => {\n                        checkbox.setState(true)\n                        setChecked(true)\n                        setTimeout(() => complete(step), 200)\n                    }}\n                >\n                {step.text}\n            </span>\n            </div>\n        </div>\n    )\n}\n\nconst StepList = () => {\n    const {game, playstyle, steps} = useContext(GameContext)\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                height: \"100%\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n        >\n            <Card style={{maxWidth: \"70vw\"}}>\n                <Card.Header>\n                    <Card.Title>{game}</Card.Title>\n                    <Card.Subtitle>{playstyle}%</Card.Subtitle>\n                </Card.Header>\n                <Card.Body>\n                    <style>\n                        {\n                            `.pretty .state label::after, .pretty .state label::before, .pretty .state .svg { top: 0 !important; }`\n                        }\n                    </style>\n                    {\n                        steps\n                        .filter(it => it.completed)\n                        .sort((a, b) => a.completed!! < b.completed!! ? -1 : 1)\n                        .map(step => <StepListItem key={step.num} step={step}/>)\n                    }\n                    {\n                        steps.filter(it => !it.completed)\n                        .slice(0, 1)\n                        .map(step => <StepListItem key={step.num} step={step} size={40}/>)\n                    }\n                    {\n                        steps.filter(it => !it.completed)\n                        .slice(1, steps.length)\n                        .map(step => <StepListItem key={step.num} step={step}/>)\n                    }\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nexport default StepList\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React, {useMemo} from \"react\";\nimport CardStack from \"./CardStack\";\nimport GameContext, {useGameContext} from './GameContext';\nimport StackContext, {useStack} from \"./StackContext\";\nimport Intro from './Intro';\nimport StepList from \"./StepList\";\n\nconst App = () => {\n    const gameContext = useGameContext()\n    const cardStackContext = useStack({first: <Intro/>})\n\n    return (\n        <GameContext.Provider value={useMemo(() => gameContext, [gameContext])}>\n            <StackContext.Provider value={useMemo(() => cardStackContext, [cardStackContext])}>\n                {\n                    gameContext.steps.length ?\n                        <StepList/>\n                        :\n                        <CardStack/>\n                }\n            </StackContext.Provider>\n        </GameContext.Provider>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}